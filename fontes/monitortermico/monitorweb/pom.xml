<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>

   <parent>
    <groupId>br.com.practicalsolutions</groupId>
    <artifactId>monitortermico</artifactId>
    <version>1.0</version>
  </parent>

   <artifactId>monitorweb</artifactId>
   <version>1.1-SNAPSHOT</version>
   <packaging>war</packaging>
   <name>Monitor TÃ©rmico Web</name>
   <description>Sistema de Controle de Termohigrometro</description>

   <licenses>
      <license>
         <name>Apache License, Version 2.0</name>
         <distribution>repo</distribution>
         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
      </license>
   </licenses>
   
	<distributionManagement>
		<repository>
			<id>nexus.cindacta3</id>
			<name>Cindacta III Nexus Server</name>
			<url>http://localhost:8081/nexus/content/repositories/releases/</url>
		</repository>
	</distributionManagement>   
   
   <repositories>
    <repository>
    	<id>central</id>
    	<url>http://localhost:8081/nexus/content/repositories/central/</url>
    </repository>
	<repository>
		<id>jboss</id>
		<name>jboss</name>
		<url>http://localhost:8081/nexus/content/repositories/jboss/</url>
	</repository>
	
   </repositories>

   <properties>
      <!-- Explicitly declaring the source encoding eliminates the following 
         message: -->
      <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
         resources, i.e. build is platform dependent! -->
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <!-- Define the version of JBoss' Java EE 6 APIs and Tools we want to import.  -->
      <jboss.bom.version>1.0.0.Final</jboss.bom.version>
      <jfreechart.version>1.0.13</jfreechart.version>
      <junit.version>4.10</junit.version>
      <primefaces.version>5.1</primefaces.version>
      <quartz.version>2.1.7</quartz.version>
      <servlet.version>2.5</servlet.version>
      <shrinkwrap.version>2.1.1</shrinkwrap.version>
      <arquillian.version>1.1.5.Final</arquillian.version>
      <jboss.home>/home/fagnerffcs/dev/jboss-as-7.1.1.Final</jboss.home>
      <spring.version>4.1.5.RELEASE</spring.version>
      <spring-security.version>3.2.6.RELEASE</spring-security.version>
   </properties>

   <dependencyManagement>
      <dependencies>
         <!-- JBoss distributes a complete set of Java EE 6 APIs including 
            a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or 
            a collection) of artifacts. We use this here so that we always get the correct 
            versions of artifacts. Here we use the jboss-javaee-6.0-with-hibernate stack 
            (you can read this as the JBoss stack of the Java EE Web Profile 6 APIs with 
            extras from the Hibernate family of projects) -->
        <dependency>
            <groupId>org.jboss.bom</groupId>
            <artifactId>jboss-javaee-6.0-with-hibernate</artifactId>
            <version>${jboss.bom.version}</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
        <dependency>
			<groupId>org.jboss.arquillian</groupId>
			<artifactId>arquillian-bom</artifactId>
			<version>${arquillian.version}</version>
			<scope>import</scope>
			<type>pom</type>
        </dependency>        
      </dependencies>
   </dependencyManagement>

   <dependencies>

      <!-- First declare the APIs we depend on and need for compilation. 
         All of them are provided by JBoss AS 7 -->

      <!-- Import the CDI API, we use provided scope as the API is included 
         in JBoss AS 7 -->
      <dependency>
         <groupId>javax.enterprise</groupId>
         <artifactId>cdi-api</artifactId>
         <scope>provided</scope>
      </dependency>

      <!-- Import the Common Annotations API (JSR-250), we use provided scope 
         as the API is included in JBoss AS 7 -->
      <dependency>
         <groupId>org.jboss.spec.javax.annotation</groupId>
         <artifactId>jboss-annotations-api_1.1_spec</artifactId>
         <scope>provided</scope>
      </dependency>
      
      <!-- Import the JAX-RS API, we use provided scope as the API is included 
         in JBoss AS 7 -->
      <dependency>
         <groupId>org.jboss.spec.javax.ws.rs</groupId>
         <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
         <scope>provided</scope>
      </dependency>

      <!-- Import the JPA API, we use provided scope as the API is included in JBoss AS 7 -->
      <dependency>
         <groupId>org.hibernate.javax.persistence</groupId>
         <artifactId>hibernate-jpa-2.0-api</artifactId>
         <scope>provided</scope>
      </dependency>
      
      <!-- Import the EJB API, we use provided scope as the API is included in JBoss AS 7 -->
      <dependency>
         <groupId>org.jboss.spec.javax.ejb</groupId>
         <artifactId>jboss-ejb-api_3.1_spec</artifactId>
         <scope>provided</scope>
      </dependency>

      <!-- JSR-303 (Bean Validation) Implementation -->
      <!-- Provides portable constraints such as @Email -->
      <!-- Hibernate Validator is shipped in JBoss AS 7 -->
      <dependency>
         <groupId>org.hibernate</groupId>
         <artifactId>hibernate-validator</artifactId>
         <scope>provided</scope>
         <exclusions>
            <exclusion>
               <groupId>org.slf4j</groupId>
               <artifactId>slf4j-api</artifactId>
            </exclusion>
         </exclusions>
      </dependency>

      <!-- Import the JSF API, we use provided scope as the API is included in JBoss AS 7 -->
        <dependency>
            <groupId>org.jboss.spec.javax.faces</groupId>
            <artifactId>jboss-jsf-api_2.1_spec</artifactId>
            <scope>provided</scope>
        </dependency>
      
      <!--Import dependencies to hibernate packages(eg. hibernate-core) depending on features you want to use like Hibernate Session used in the 	quickstart-->
      <!--please note that scope is provided as these jars are shipped with as7-->
      <dependency>
         <groupId>org.hibernate</groupId>
         <artifactId>hibernate-core</artifactId>
         <scope>provided</scope>
      </dependency>
      
      <!-- Now we declare any tools needed -->

      <!-- Needed for running tests (you may also use TestNG) -->
      <dependency>
         <groupId>junit</groupId>
         <artifactId>junit</artifactId>
         <version>${junit.version}</version>
         <scope>test</scope>
      </dependency>

	  <dependency>  
    	<groupId>org.primefaces</groupId>  
    	<artifactId>primefaces</artifactId>  
    	<version>${primefaces.version}</version>  
	  </dependency>
	  
	  <dependency>
	    <groupId>org.quartz-scheduler</groupId>
	    <artifactId>quartz</artifactId>
	    <version>${quartz.version}</version>
	  </dependency>
	  
	  <dependency>
		<groupId>jfree</groupId>
		<artifactId>jfreechart</artifactId>
		<version>${jfreechart.version}</version>
	  </dependency>
	  
	  <dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>servlet-api</artifactId>
		<version>${servlet.version}</version>
		<scope>provided</scope>
	  </dependency>
	
      <dependency>
        <groupId>javax.mail</groupId>
        <artifactId>mail</artifactId>
      </dependency>
      
	  <dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-simple</artifactId>
		<version>1.6.4</version>
		<scope>test</scope>
	  </dependency>
	  
	  <dependency>
	    <groupId>ch.qos.logback</groupId>
	    <artifactId>logback-classic</artifactId>
	    <version>1.0.13</version>
	 </dependency>
	 
	  <dependency>
	    <groupId>ch.qos.logback</groupId>
	    <artifactId>logback-core</artifactId>
	    <version>1.0.13</version>
	 </dependency>		 	  
	  
	  <!-- Arquillian Dependencies -->
	  <dependency>
		<groupId>org.jboss.weld</groupId>
		<artifactId>weld-core</artifactId>
		<version>1.1.5.Final</version>
		<scope>test</scope>
	  </dependency>
	  
	  <dependency>
        <groupId>org.jboss.arquillian.junit</groupId>
        <artifactId>arquillian-junit-container</artifactId>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>org.jboss.shrinkwrap.resolver</groupId>
        <artifactId>shrinkwrap-resolver-depchain</artifactId>
        <scope>test</scope>
        <type>pom</type>
      </dependency>
      
     <!-- SPRING DEPENDENCIES -->
	 <dependency>
     	<groupId>org.springframework</groupId>
        <artifactId>spring-context-support</artifactId>
        <version>${spring.version}</version>
     </dependency>
 
     <dependency>
     	<groupId>org.springframework</groupId>
        <artifactId>spring-web</artifactId>
        <version>${spring.version}</version>
     </dependency>            

     <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-web</artifactId>
         <version>${spring-security.version}</version>
         <exclusions>
			 <exclusion>
	            <groupId>org.springframework</groupId>
	            <artifactId>spring-expression</artifactId>
	         </exclusion>
	     </exclusions>
     </dependency>
 
     <dependency>
     	<groupId>org.springframework.security</groupId>
        <artifactId>spring-security-config</artifactId>
        <version>${spring-security.version}</version>
     </dependency>
 
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
        </dependency>      
		
   </dependencies>

   <build>
      <!-- Maven will append the version to the finalName (which is the name 
         given to the generated war, and hence the context root) -->
      <finalName>${project.artifactId}</finalName>
      <plugins>
         <!-- Compiler plugin enforces Java 1.6 compatibility and activates 
            annotation processors -->
         <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>2.3.1</version>
            <configuration>
               <source>1.6</source>
               <target>1.6</target>
            </configuration>
         </plugin>
         <plugin>
            <artifactId>maven-war-plugin</artifactId>
            <version>2.1.1</version>
            <configuration>
               <!-- Java EE 6 doesn't require web.xml, Maven needs to catch 
                  up! -->
               <failOnMissingWebXml>false</failOnMissingWebXml>
            </configuration>
         </plugin>
         <!-- For Integration Tests -->
		 <plugin>
		    <artifactId>maven-surefire-plugin</artifactId>
		    <version>2.17</version>
			<configuration>
		        <skipTests>true</skipTests>
		        <includes>
		            <include>EquipamentoRegistrationIT.java</include>
		            <include>LocalidadeRegistrationIT.java</include>
		        </includes>
		    </configuration>		    
		 </plugin>         
		 <plugin>
		 	<groupId>org.apache.maven.plugins</groupId>
		 	<artifactId>maven-failsafe-plugin</artifactId>
		 	<version>2.7.1</version>
			<executions>
		 		<execution>
		  			<id>integration-test</id>
		  			<phase>integration-test</phase>
		  			<goals>
		  				<goal>integration-test</goal>
		  			</goals>
		  		</execution>
		  		<execution>
		  			<id>verify</id>
		  			<phase>verify</phase>
		  			<goals>
		  				<goal>verify</goal>
		  			</goals>
		  		</execution>
			</executions>		 	
		 </plugin>          
         <!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
         <!-- To use, set the JBOSS_HOME environment variable and run: mvn 
            package jboss-as:deploy -->
         <plugin>
            <groupId>org.jboss.as.plugins</groupId>
            <artifactId>jboss-as-maven-plugin</artifactId>
            <version>7.1.1.Final</version>
         </plugin>
         
		 <plugin>
            <groupId>org.eclipse.m2e</groupId>
            <artifactId>lifecycle-mapping</artifactId>
            <version>1.0.0</version>
            <configuration>
                <lifecycleMappingMetadata>
                    <pluginExecutions>
                        <pluginExecution>
                            <pluginExecutionFilter>
                                <groupId>org.apache.maven.plugins</groupId>
                                <artifactId>maven-dependency-plugin</artifactId>
                                <versionRange>[2.0,)</versionRange>
                                <goals>
                                    <goal>copy-dependencies</goal>
                                </goals>
                            </pluginExecutionFilter>
                            <action>
                                <execute />
                            </action>
                        </pluginExecution>
                    </pluginExecutions>
                </lifecycleMappingMetadata>
            </configuration>
         </plugin> 
         
      </plugins>
   </build>

   <profiles>
      <profile>
         <!-- The default profile skips all tests, though you can tune it 
            to run just unit tests based on a custom pattern -->
         <!-- Seperate profiles are provided for running all tests, including 
            Arquillian tests that execute in the specified container -->
         <id>default</id>
         <build>
            <plugins>
               <plugin>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <version>2.4.3</version>
                  <configuration>
                     <skip>true</skip>
                  </configuration>
               </plugin>
            </plugins>
         </build>
      </profile>
      
	  <!-- JBoss AS MANAGED -->
      <profile>
         <!-- An optional Arquillian testing profile that executes tests 
            in your JBoss AS instance -->
         <!-- This profile will start a new JBoss AS instance, and execute 
            the test, shutting it down when done -->
         <!-- Run with: mvn clean test -Parquillian-jbossas-managed -->
         <id>arquillian-jbossas-managed</id>
        <dependencies>
	        <dependency>
	            <groupId>org.jboss.spec</groupId>
	            <artifactId>jboss-javaee-6.0</artifactId>
	            <version>1.0.0.Final</version>
	            <type>pom</type>
	            <scope>provided</scope>
	        </dependency>
	        <dependency>
	            <groupId>org.jboss.as</groupId>
	            <artifactId>jboss-as-arquillian-container-managed</artifactId>
	            <version>7.1.1.Final</version>
	            <scope>test</scope>
	        </dependency>	        
	     </dependencies>
      </profile>
      
      <!-- JBoss AS 7 REMOTE -->
      <profile>
         <!-- An optional Arquillian testing profile that executes tests 
            in a remote JBoss AS instance -->
         <!-- Run with: mvn clean test -Parq-jbossas-remote -->
         <id>arq-jbossas-remote</id>
         <activation>
            <activeByDefault>true</activeByDefault>
         </activation>
         <dependencies>
            <dependency>
               <groupId>org.jboss.as</groupId>
               <artifactId>jboss-as-arquillian-container-remote</artifactId>
               <version>7.1.1.Final</version>
               <scope>test</scope>
            </dependency>
         </dependencies>
      </profile>
      
      <!-- WELD -->
      <profile>
        <id>arquillian-weld-ee-embedded</id>
        <dependencies>
            <dependency>
                <groupId>org.jboss.arquillian.container</groupId>
                <artifactId>arquillian-weld-ee-embedded-1.1</artifactId>
                <version>1.0.0.CR3</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.jboss.weld</groupId>
                <artifactId>weld-core</artifactId>
                <version>1.1.5.Final</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-simple</artifactId>
                <version>1.6.4</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
      </profile>

   </profiles>
</project>